===========================
EpubCreater.py
===========================
它提供了生成epub文件的核心功能.



func: guid(s='') -> str
--------------------------
这是一个额外的功能,它实际上是对 ``uuid`` 中 ``uuid3`` 的简化封装,将了计算
``uuid`` 时的一些固定的处理动作固化,因此,给它一个对象,还你一个字符串,这就够了.

它主要用于为 ``OPF.Metadata.dc:identifier`` 计算一个唯一序号.

::

    >>> guid('a')
    'a20740b4-71b5-3b90-852e-bdb859da9fdd'
    >>> guid('')
    '596b79dc-00dd-3991-a72f-d3696c38c64f'
    >>> guid()
    '596b79dc-00dd-3991-a72f-d3696c38c64f'
    >>> guid(3) == guid('3')
    True

func: getgenerator(_generator: str, **kwgs)
------------------------------------------------
它可以使用一个字典来传递建立迭代器所需的参数,实际上,参数 ``_generator`` 同样可以
放入其中.

如果在kwgs中传递了相应的迭代器无法识别的参数,则会产生一个错误

在 ``example.py`` 中演示了如何使用这个函数.

它也可以用来得到一个非迭代器实例,只要参数正确.

::

    >>> getgenerator('os.path.splitext', p='a.txt')
    ('a', '.txt')

要得到同样的结果,也可以这样:

::

    >>> getgenerator(**{'_generator': 'os.path.splitext', 'p': 'a.txt'})
    ('a', '.txt')

这样做的好处是,可以使用一个字典来得到一个对象,而且这个对象所在的模块可以是当前
没有导入的.

func: createepub(filename, source, showlog=True, meta=None)
-------------------------------------------------------------
这个函数简化了epub的生成功能的调用,利用它,可以在准备好参数后,仅通过一行代码就完
成一个epub文件的生成.

在 ``example.py`` 中演示了如何使用这个函数. ``example.py`` 中大部分的代码都是在
建立一个名为kwgs的字典,在最后,将它交付给 ``createepub()`` 来执行.

func: recreate(epub_file: str, showlog=True)
------------------------------------------------
它可以对使用 ``createepub()`` 生成的epub文档进行重生成工作.它会根据epub中保留的
信息重新建立当时使用的迭代器并给它同样的参数,然后再一次使用 ``createepub()`` 来
生成这个epub文档.

当一个epub文档的来源数据已经更新,你可以直接将这个epub文档交给它,无论它是否更改了
文件名.然后...就完成了.

class EpubCreater
--------------------
这是epub文档生成器.它暴露了些属性让epub文档的内部可以进行一些修改:

- source: 可以通过它指定内容文档的来源,这是一个list对象,因此,更论上可以添加多个
文档源(迭代器),但需要迭代器处理好它们迭代出的文档的 ``name`` 属性互相不重复.简单
的办法是使用同一个 ``namegen`` 实例.

- metadata: 可以通过它来向epub文档添加文档元数据

- mainfest: 暂未对其扩展使用

- spine: 暂未对其扩展使用

- nav: 暂未对其扩展使用

- file: 用它可以指定生成的epub文件的名字,它的扩展名将会强制替换为".epub"

- showlog: 当它为 ``True`` 时,会在生成epub文档的过程中在控制台输出正在写入的文件

它有一个write方法来完成向磁盘写入epub文件的工作,在没有调用此方法时,不会建立相应
的epub文件.

当 ``EpubCreater`` 用在 ``with`` 语句中时,不需要调用write方法来启动将数据
写入到epub文件中的动作.在 ``with`` 块结束时会自动调用它来启动写入动作.